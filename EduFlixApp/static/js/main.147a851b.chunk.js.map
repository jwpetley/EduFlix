{"version":3,"sources":["index.tsx"],"names":["CONFIG_URL","store","SWRTC","Wrapper","styled","div","LectureDiv","StreamingDiv","StreamDiv","StyledStream","StyledLectureVideo","video","PeerVideos","this","props","peers","map","peer","console","log","address","render","videoStreams","media","filter","m","kind","remoteDisabled","length","id","React","Component","Chat","roomId","useState","messages","setMessages","socketRef","useRef","useEffect","current","io","on","message","incomingMessage","ownedByCurrentUser","username","disconnect","sendMessage","messageBody","emit","senderId","useChat","newMessage","setNewMessage","className","i","type","onChange","event","target","value","onClick","ReactDOM","src","queryString","window","location","search","link","URLSearchParams","get","getVideoURL","controls","configUrl","audio","auto","name","password","shared","videos","document","getElementById"],"mappings":"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","file":"static/js/main.147a851b.chunk.js","sourcesContent":["import { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as SWRTC from '@andyet/simplewebrtc';\nimport styled from 'styled-components';\nimport io from 'socket.io-client';\nimport { string } from 'yargs';\n\n// ====================================================================\n// IMPORTANT SETUP\n// ====================================================================\n// Replace `YOUR_PUBLISHABLE_API_KEY` here with the Publishable API Key\n// you received when signing up for SimpleWebRTC\n// --------------------------------------------------------------------\nconst API_KEY = '716625839d6dd087acb04de6';\n// ====================================================================\n\nconst ROOM_NAME = 'YOUR_ROOM_NAME';\nconst ROOM_PASSWORD = 'YOUR_ROOM_PASSWORD';\nconst CONFIG_URL = `https://api.simplewebrtc.com/config/guest/${API_KEY}`;\n\nconst store = SWRTC.createStore();\n\nconst Wrapper = styled.div`\n  width: 100%;\n  justify-content: space-evenly;\n`\n\nconst LectureDiv = styled.div`\n  flex: 1 1 50%;\n\n`\n\nconst StreamingDiv = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  flex-wrap: wrap;\n  flex-direction: column;\n`\n\nconst StreamDiv = styled.div`\n  flex: 1 1 0;\n  margin: 1% 1% 1% 1%;\n  width: 100px;\n`\n\nconst StyledStream = styled(SWRTC.Video)`\n  object-fit: contain;\n`\n\nconst StyledLectureVideo = styled.video`\n  width: 100%;\n`\n\ninterface PeerVideosProps {\n  peers: SWRTC.Peer[];\n}\nclass PeerVideos extends React.Component<PeerVideosProps> {\n  render() {\n    const otherVideos = this.props.peers.map((peer) => {\n      console.log(peer)\n      return <SWRTC.RemoteMediaList\n        peer={peer.address}\n        render={({ media }) => {\n          const videoStreams = media.filter(m => m.kind === 'video' && !m.remoteDisabled);\n          if (videoStreams.length > 0) {\n            return <StreamDiv key={peer.id}>\n              <StyledStream media={videoStreams[0]}></StyledStream>\n            </StreamDiv>\n          }\n          return <h1>Can't find video for peer</h1>\n        }}\n      />;\n    })\n    return otherVideos;\n  }\n}\n\nfunction getVideoURL(): string {\n    const queryString = window.location.search;\n    console.log(queryString);\n    const urlParams = new URLSearchParams(queryString);\n    const link = urlParams.get('s3link')\n    if (link == null) {\n      return ''\n    }\n    return link\n}\n\ninterface ChatProps {}\ninterface ChatState {\n  message: string\n  messages: string[]\n}\n\ninterface Message {\n  message: string\n  username: string\n}\n\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst useChat = (roomId: string) => {\n  const initialState: Message[] = []\n  const [messages, setMessages] = React.useState(initialState); // Sent and received messages\n  const socketRef = React.useRef<SocketIOClient.Socket>();\n\n  React.useEffect(() => {\n    \n    // Creates a WebSocket connection\n    socketRef.current = io(SOCKET_SERVER_URL, {\n      // query: { roomId },\n    });\n    \n    // Listens for incoming messages\n    socketRef.current.on(\"new_message\", (message: Message) => {\n      console.log(\"Got new message\")\n      const incomingMessage = {\n        ...message,\n        ownedByCurrentUser: message.username === socketRef.current?.id,\n      };\n      setMessages((messages) => [...messages, incomingMessage]);\n    });\n    \n    // Destroys the socket reference\n    // when the connection is closed\n    return () => {\n      socketRef.current?.disconnect();\n    };\n  }, [roomId]);\n\n  // Sends a message to the server that\n  // forwards it to all users in the same room\n  const sendMessage = (messageBody: any) => {\n    console.log(\"Sending message\")\n    console.log(socketRef)\n    socketRef.current?.emit(\"new_message\", {\n      message: messageBody,\n      senderId: socketRef.current.id,\n    });\n  };\n\n  return { messages, sendMessage };\n};\n\nconst Chat = (props: ChatProps) => {\n\n    const { messages, sendMessage } = useChat('roomId');\n    const [newMessage, setNewMessage] = React.useState(\"\");\n    console.log(messages)\n    const handleNewMessageChange = (event: any) => {\n      setNewMessage(event.target.value);\n    };\n  \n    const handleSendMessage = () => {\n      sendMessage(newMessage);\n      setNewMessage(\"\");\n    };\n\n    return <div>\n      <section id=\"chatroom\">\n        <section id=\"feedback\"></section>\n        <h2>Messages</h2>\n        <ul className=\"messages-list\">\n          {messages.map((message, i) => (\n            <li\n              key={i}\n            >\n              {message.message}\n            </li>\n          ))}\n        </ul>\n      </section>\n\n      <section id=\"input_zone\">\n        <input id=\"message\" className=\"vertical-align\" type=\"text\" onChange={handleNewMessageChange} />\n        <button id=\"send_message\" className=\"vertical-align\" type=\"button\" onClick={handleSendMessage}>Send</button>\n      </section>\n    </div>\n  // }\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <Wrapper>\n      <LectureDiv>\n        <h1>The lecture video will go here</h1>\n        <StyledLectureVideo src={getVideoURL()} controls>\n          Your browser does not support the video tag.\n        </StyledLectureVideo>\n        <Chat />\n      </LectureDiv>\n      <StreamingDiv>\n        <SWRTC.Provider configUrl={CONFIG_URL}>\n          {/* Render based on the connection state */}\n          <SWRTC.Connecting>\n            <h1>Connecting...</h1>\n          </SWRTC.Connecting>\n\n          <SWRTC.Connected>\n            {/* <h1>Connected!</h1> */}\n            {/* Request the user's media */}\n            <SWRTC.RequestUserMedia audio video auto />\n\n            {/* Enable playing remote audio. */}\n            <SWRTC.RemoteAudioPlayer />\n\n            {/* Connect to a room with a name and optional password */}\n            <SWRTC.Room name={ROOM_NAME} password={ROOM_PASSWORD}>\n              {({ peers }) => {\n                \n                /* Use the rest of the SWRTC React Components to render your UI */\n                return <>\n                  {/* Render the local person's video */}\n                  <SWRTC.LocalMediaList \n                    shared={true}\n                    render={({ media }) => {\n                      const videos = media.filter(m => m.kind === 'video');\n                      if (videos.length > 0) {\n                        return (\n                          <StreamDiv>\n                            {videos.map(m =>      \n                              <StyledStream key={m.id} media={m} />\n                            )}\n                          </StreamDiv>\n                        );\n                      }\n                      return <h1>No Stream For Local User - is your webcam on?</h1>;\n                    }}\n                  />\n                  {/* Loop over the peers and render their video */}\n                  <PeerVideos peers={peers} />\n                </>\n              }}\n            </SWRTC.Room>\n          </SWRTC.Connected>\n        </SWRTC.Provider>\n      </StreamingDiv>\n    </Wrapper>\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}