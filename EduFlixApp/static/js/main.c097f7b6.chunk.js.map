{"version":3,"sources":["index.tsx"],"names":["CONFIG_URL","store","SWRTC","Wrapper","styled","div","LectureDiv","StreamingDiv","StyledStream","StyledLectureVideo","video","PeerVideos","this","props","peers","map","peer","console","log","address","render","videoStreams","media","filter","m","kind","remoteDisabled","length","id","React","Component","ReactDOM","src","queryString","window","location","search","link","URLSearchParams","get","getVideoURL","controls","configUrl","audio","auto","name","password","shared","videos","document","getElementById"],"mappings":"osBAYA,IAKMA,EAAU,oDALA,4BAOVC,EAAQC,MAERC,EAAUC,IAAOC,IAAV,KAMPC,EAAaF,IAAOC,IAAV,KAKVE,EAAeH,IAAOC,IAAV,KAIZG,EAAeJ,YAAOF,IAAPE,CAAH,KAIZK,EAAqBL,IAAOM,MAAV,KAOlBC,E,uKAkBF,OAhBoBC,KAAKC,MAAMC,MAAMC,KAAI,SAACC,GAExC,OADAC,QAAQC,IAAIF,GACL,cAAC,IAAD,CACLA,KAAMA,EAAKG,QACXC,OAAQ,YAAgB,IAChBC,EADe,EAAZC,MACkBC,QAAO,SAAAC,GAAC,MAAe,UAAXA,EAAEC,OAAqBD,EAAEE,kBAChE,OAAIL,EAAaM,OAAS,EACjB,gCACL,gDAAmBX,EAAKY,MACxB,cAACpB,EAAD,CAAcc,MAAOD,EAAa,OAFnBL,EAAKY,IAKjB,qE,GAdQC,IAAMC,WAiC/BC,IAASX,OACP,cAAC,IAAD,CAAUnB,MAAOA,EAAjB,SACE,eAACE,EAAD,WACE,eAACG,EAAD,WACE,gEACA,cAACG,EAAD,CAAoBuB,IAhB5B,WACI,IAAMC,EAAcC,OAAOC,SAASC,OACpCnB,QAAQC,IAAIe,GACZ,IACMI,EADY,IAAIC,gBAAgBL,GACfM,IAAI,UAC3B,OAAY,MAARF,EACK,GAEFA,EAQsBG,GAAeC,UAAQ,EAAhD,6DAIF,cAAClC,EAAD,UACE,eAAC,IAAD,CAAgBmC,UAAW1C,EAA3B,UAEE,cAAC,IAAD,UACE,iDAGF,eAAC,IAAD,WACE,4CAEA,cAAC,IAAD,CAAwB2C,OAAK,EAACjC,OAAK,EAACkC,MAAI,IAGxC,cAAC,IAAD,IAGA,cAAC,IAAD,CAAYC,KA1FN,iBA0FuBC,SAzFnB,qBAyFV,SACG,YAAgB,IAAbhC,EAAY,EAAZA,MAGF,OAAO,qCAEL,cAAC,IAAD,CACEiC,QAAQ,EACR3B,OAAQ,YAAgB,IAChB4B,EADe,EAAZ1B,MACYC,QAAO,SAAAC,GAAC,MAAe,UAAXA,EAAEC,QACnC,OAAIuB,EAAOrB,OAAS,EAEhB,mCACGqB,EAAOjC,KAAI,SAAAS,GAAC,OACT,qCACE,4CACA,cAAChB,EAAD,CAAyBc,MAAOE,GAAbA,EAAEI,YAM1B,kFAIX,cAACjB,EAAD,CAAYG,MAAOA,uBASnCmC,SAASC,eAAe,U","file":"static/js/main.c097f7b6.chunk.js","sourcesContent":["import { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as SWRTC from '@andyet/simplewebrtc';\nimport styled from 'styled-components';\n\n// ====================================================================\n// IMPORTANT SETUP\n// ====================================================================\n// Replace `YOUR_PUBLISHABLE_API_KEY` here with the Publishable API Key\n// you received when signing up for SimpleWebRTC\n// --------------------------------------------------------------------\nconst API_KEY = '716625839d6dd087acb04de6';\n// ====================================================================\n\nconst ROOM_NAME = 'YOUR_ROOM_NAME';\nconst ROOM_PASSWORD = 'YOUR_ROOM_PASSWORD';\nconst CONFIG_URL = `https://api.simplewebrtc.com/config/guest/${API_KEY}`;\n\nconst store = SWRTC.createStore();\n\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: space-evenly;\n`\n\nconst LectureDiv = styled.div`\n  flex: 1 1 50%;\n\n`\n\nconst StreamingDiv = styled.div`\n  flex: 1 1 50%;\n`\n\nconst StyledStream = styled(SWRTC.Video)`\n  width: 100%;\n`\n\nconst StyledLectureVideo = styled.video`\n  width: 100%;\n`\n\ninterface PeerVideosProps {\n  peers: SWRTC.Peer[];\n}\nclass PeerVideos extends React.Component<PeerVideosProps> {\n  render() {\n    const otherVideos = this.props.peers.map((peer) => {\n      console.log(peer)\n      return <SWRTC.RemoteMediaList\n        peer={peer.address}\n        render={({ media }) => {\n          const videoStreams = media.filter(m => m.kind === 'video' && !m.remoteDisabled);\n          if (videoStreams.length > 0) {\n            return <div key={peer.id}>\n              <p>Video for Peer {peer.id}</p>\n              <StyledStream media={videoStreams[0]}></StyledStream>\n            </div>\n          }\n          return <h1>Can't find video for peer</h1>\n        }}\n      />;\n    })\n    return otherVideos;\n  }\n}\n\nfunction getVideoURL(): string {\n    const queryString = window.location.search;\n    console.log(queryString);\n    const urlParams = new URLSearchParams(queryString);\n    const link = urlParams.get('s3link')\n    if (link == null) {\n      return ''\n    }\n    return link\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <Wrapper>\n      <LectureDiv>\n        <h1>The lecture video will go here</h1>\n        <StyledLectureVideo src={getVideoURL()} controls>\n          Your browser does not support the video tag.\n        </StyledLectureVideo>\n      </LectureDiv>\n      <StreamingDiv>\n        <SWRTC.Provider configUrl={CONFIG_URL}>\n          {/* Render based on the connection state */}\n          <SWRTC.Connecting>\n            <h1>Connecting...</h1>\n          </SWRTC.Connecting>\n\n          <SWRTC.Connected>\n            <h1>Connected!</h1>\n            {/* Request the user's media */}\n            <SWRTC.RequestUserMedia audio video auto />\n\n            {/* Enable playing remote audio. */}\n            <SWRTC.RemoteAudioPlayer />\n\n            {/* Connect to a room with a name and optional password */}\n            <SWRTC.Room name={ROOM_NAME} password={ROOM_PASSWORD}>\n              {({ peers }) => {\n                \n                /* Use the rest of the SWRTC React Components to render your UI */\n                return <>\n                  {/* Render the local person's video */}\n                  <SWRTC.LocalMediaList \n                    shared={true}\n                    render={({ media }) => {\n                      const videos = media.filter(m => m.kind === 'video');\n                      if (videos.length > 0) {\n                        return (\n                          <>\n                            {videos.map(m =>\n                                <>\n                                  <p>Local Video</p>\n                                  <StyledStream key={m.id} media={m} />\n                                </>\n                            )}\n                          </>\n                        );\n                      }\n                      return <h1>No Stream For Local User - is your webcam on?</h1>;\n                    }}\n                  />\n                  {/* Loop over the peers and render their video */}\n                  <PeerVideos peers={peers} />\n                </>\n              }}\n            </SWRTC.Room>\n          </SWRTC.Connected>\n        </SWRTC.Provider>\n      </StreamingDiv>\n    </Wrapper>\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}